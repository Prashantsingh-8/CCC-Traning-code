Q-15)  You are given a task to find the sum of Products of corresponding elements of two arrays of the same size.
Given that k modifications are allowed on the first array, what is the minimum product that can be obtained?
In each modification, one array element of the first array can either be increased or decreased by 2.
Note- the product sum is Summation (A[i]*B[i]) for all i from 1 to n where n is the size of both arrays
*Hint : *
You should try to use all the k operations on any single element of the modifiable array a
Input Format
1.	First line of the input contains n and k delimited by whitespace
2.	Second line contains the Array A (modifiable array) with its values delimited by spaces
3.	Third line contains the Array B (non-modifiable array) with its values delimited by spaces
Constraints
1.	1 ≤ N ≤ 10^5
2.	0 ≤ |A[i]|, |B[i]| ≤ 10^5
3.	0 ≤ K ≤ 10^9
Output Format
Output the minimum sum of products of the two arrays.
Sample Input 0
3 5
1 2 -3
-2 3 -5
Sample Output 0
-31
Explanation 0
Here total numbers are 3 and total modifications allowed are 5. So we modified A[2], which is -3 and increased it by 10 (as 5 modifications are allowed).
Now final sum will be
(1 * -2) + (2 * 3) + (7 * -5)
-2 + 6 - 35
-31

-31 is our final answer.
Sample Input 1
5 3
2 3 4 5 4
3 4 2 3 2
Sample Output 1
25
Explanation 1
Here total numbers are 5 and total modifications allowed are 3. So we modified A[1], which is 3 and decreased it by 6 (as 3 modifications are allowed).
Now final sum will be
(2 * 3) + (-3 * 4) + (4 * 2) + (5 * 3) + (4 * 2)
6 - 12 + 8 + 15 + 8
25

25 is our final answer.





CODE:
#include <bits/stdc++.h>
using namespace std;
long int minproduct(long int a[], long int b[], long int n, long int k) {
long int diff = 0, res = 0;
long int temp;
for (long int i = 0; i < n; i++) {
long int pro = a[i] * b[i];
res = res + pro;
if (pro < 0 && b[i] < 0) // b[i] is -ve
temp = (a[i] + 2 * k) * b[i];
else if (pro < 0 && a[i] < 0) // pro -ve and a[i] -ve
temp = (a[i] - 2 * k) * b[i];
else if (pro > 0 && a[i] < 0) // pro +ve and a[i] -ve
temp = (a[i] + 2 * k) * b[i];
else if (pro > 0 && a[i] > 0) // pro +ve and a[i] +ve
temp = (a[i] - 2 * k) * b[i];
long int d = abs(pro - temp);
if (d > diff)
diff = d;
}
return res - diff;
}
int main()
{
long int n,mod;
cin>>n>>mod;
long int a[n], b[n];
for (long int i = 0; i < n; i++)
{
cin>>a[i];
}
for (long int i = 0; i < n; i++)
{
cin>>b[i];
}
cout<<minproduct(a, b, n, mod);
return 0;
}
